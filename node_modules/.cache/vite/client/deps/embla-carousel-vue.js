import {
  EmblaCarousel
} from "./chunk-6A37NPJ5.js";
import "./chunk-JLSDPW4D.js";
import "./chunk-MNWBZQKJ.js";
import {
  onMounted,
  onUnmounted,
  watch
} from "./chunk-3Q27KRJ5.js";
import {
  isRef,
  ref
} from "./chunk-BOVKDABU.js";
import "./chunk-V6R5RJCE.js";
import "./chunk-IMAK6PR4.js";

// node_modules/embla-carousel-reactive-utils/embla-carousel-reactive-utils.esm.js
function isObject(subject) {
  return Object.prototype.toString.call(subject) === "[object Object]";
}
function isRecord(subject) {
  return isObject(subject) || Array.isArray(subject);
}
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
function areOptionsEqual(optionsA, optionsB) {
  const optionsAKeys = Object.keys(optionsA);
  const optionsBKeys = Object.keys(optionsB);
  if (optionsAKeys.length !== optionsBKeys.length)
    return false;
  const breakpointsA = JSON.stringify(Object.keys(optionsA.breakpoints || {}));
  const breakpointsB = JSON.stringify(Object.keys(optionsB.breakpoints || {}));
  if (breakpointsA !== breakpointsB)
    return false;
  return optionsAKeys.every((key) => {
    const valueA = optionsA[key];
    const valueB = optionsB[key];
    if (typeof valueA === "function")
      return `${valueA}` === `${valueB}`;
    if (!isRecord(valueA) || !isRecord(valueB))
      return valueA === valueB;
    return areOptionsEqual(valueA, valueB);
  });
}
function sortAndMapPluginToOptions(plugins) {
  return plugins.concat().sort((a, b) => a.name > b.name ? 1 : -1).map((plugin) => plugin.options);
}
function arePluginsEqual(pluginsA, pluginsB) {
  if (pluginsA.length !== pluginsB.length)
    return false;
  const optionsA = sortAndMapPluginToOptions(pluginsA);
  const optionsB = sortAndMapPluginToOptions(pluginsB);
  return optionsA.every((optionA, index) => {
    const optionB = optionsB[index];
    return areOptionsEqual(optionA, optionB);
  });
}

// node_modules/embla-carousel-vue/embla-carousel-vue.esm.js
function emblaCarouselVue(options = {}, plugins = []) {
  const storedOptions = ref(isRef(options) ? options.value : options);
  const storedPlugins = ref(isRef(plugins) ? plugins.value : plugins);
  const emblaNode = ref();
  const emblaApi = ref();
  function reInit() {
    if (!emblaApi.value)
      return;
    emblaApi.value.reInit(storedOptions.value, storedPlugins.value);
  }
  onMounted(() => {
    if (!canUseDOM() || !emblaNode.value)
      return;
    EmblaCarousel.globalOptions = emblaCarouselVue.globalOptions;
    emblaApi.value = EmblaCarousel(emblaNode.value, storedOptions.value, storedPlugins.value);
  });
  onUnmounted(() => {
    if (emblaApi.value)
      emblaApi.value.destroy();
  });
  if (isRef(options)) {
    watch(options, (newOptions) => {
      if (areOptionsEqual(storedOptions.value, newOptions))
        return;
      storedOptions.value = newOptions;
      reInit();
    });
  }
  if (isRef(plugins)) {
    watch(plugins, (newPlugins) => {
      if (arePluginsEqual(storedPlugins.value, newPlugins))
        return;
      storedPlugins.value = newPlugins;
      reInit();
    });
  }
  return [emblaNode, emblaApi];
}
emblaCarouselVue.globalOptions = void 0;
export {
  emblaCarouselVue as default
};
//# sourceMappingURL=embla-carousel-vue.js.map
